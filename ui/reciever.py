import tkinter as tk
from tkinter import messagebox, filedialog
from tkinter import ttk
from PIL import Image, ImageTk
import os
import threading

class ReceiverFrame:
    def __init__(self, root, switch_back_callback):
        self.root = root
        self.switch_back_callback = switch_back_callback
        self.thumbnail_canvas = None  # To display the selected thumbnail
        self.output_file_path = "./output.tmp"  # Path to the file generated by the sender
        self.selected_save_path = None

    def show(self):
        # Clear the existing window content
        for widget in self.root.winfo_children():
            widget.destroy()

        # Heading
        heading = tk.Label(self.root, text="Select an Image", font=("Arial", 15))
        heading.pack(pady=10)

        style = ttk.Style()
        style.configure("Custom.TButton", font=('calibri', 12, 'bold'))

        try:
            # Load the image
            image_path = r"tele-removebg-preview.png"  # Replace with your image path
            img = Image.open(image_path)
            img.thumbnail((100, 100))  # Resize the image to fit better (optional)
            img_tk = ImageTk.PhotoImage(img)

            # Create an image label
            image_label = tk.Label(self.root, image=img_tk)
            image_label.image = img_tk  # Keep a reference to avoid garbage collection

            # Use the `place()` method to position at bottom-right
            self.root.update_idletasks()  # Update the window to get its dimensions
            x_position = self.root.winfo_width() - 110  # Adjust for image size and padding
            y_position = self.root.winfo_height() - 90
            image_label.place(x=x_position, y=y_position)
        except Exception as e:
            print(f"Failed to load image: {e}")

        # Function to select the save location
        def browse_save_location():
            file_path = filedialog.asksaveasfilename(
                title="Save Processed File",
                filetypes=[("All Files", "*.*"), ("Text Files", "*.txt")],
                defaultextension=".txt"
            )
            if file_path:
                self.selected_save_path = file_path
                store_button.config(state=tk.NORMAL)

        # Display the selected thumbnail on the canvas
        def display_thumbnail():
            if self.thumbnail_canvas:
                self.thumbnail_canvas.destroy()

            self.thumbnail_canvas = tk.Canvas(self.root, width=150, height=150, bg="white", highlightthickness=1, highlightbackground="black")
            self.thumbnail_canvas.pack(pady=10, before=button_frame)

            try:
                img = Image.open(self.output_file_path)  # Dummy placeholder for thumbnail
                img.thumbnail((150, 150))
                img_tk = ImageTk.PhotoImage(img)

                self.thumbnail_canvas.create_image(75, 75, image=img_tk)
                self.thumbnail_canvas.image = img_tk  # Keep a reference
            except Exception as e:
                print(f"Error displaying thumbnail: {e}")

        # Function to process the received file
        def process_and_store_file():
            if not os.path.exists(self.output_file_path):
                messagebox.showerror("Error", "Output file not found!")
                return

            if not self.selected_save_path:
                messagebox.showwarning("Warning", "Please select a save location first!")
                return

            try:
                # Run the remove_preamble function on the output file
                remove_preamble(self.output_file_path)

                # Write the processed data to the user-specified location
                with open(self.selected_save_path, "w") as file:
                    file.write(self.output_file_path)

                messagebox.showinfo("Success", "File stored successfully!")
                self.switch_back_callback()
            except Exception as e:
                messagebox.showerror("Error", f"Failed to process and store file: {e}")

        # Simulated remove_preamble function
        # Function to remove both front and back preambles and sequence from file
        def remove_preamble(file_path):
            global content
            
            detect_sequence = b'sts'
            preamble = b'11000110101100111111010110101000011010110011111000110101100'

            with open(file_path, 'rb') as file:
                content = file.read()

            start_index = content.find(detect_sequence)
            if start_index != -1:
                content = content[start_index + len(detect_sequence):]

            end_index = content.rfind(detect_sequence)
            if end_index != -1:
                content = content[:end_index]

            preamble_length = len(preamble)
            while True:
                start_index = content.find(preamble)
                if start_index == -1:
                    break
                else:
                    content = content[start_index + preamble_length:]

            while True:
                end_index = content.rfind(preamble)
                if end_index == -1:
                    break
                else:
                    content = content[:end_index]
        



        # Browse button
        browse_button = ttk.Button(self.root, text="Browse Save Location", command=browse_save_location, width=20, style="Custom.TButton")
        browse_button.pack(pady=10)

        button_frame = ttk.Frame(self.root)
        button_frame.pack(pady=10)

        # Store button
        store_button = ttk.Button(button_frame, text="Store File", command=lambda: threading.Thread(target=process_and_store_file).start(), state=tk.DISABLED, width=20, style="Custom.TButton")
        store_button.grid(row=0, column=1, padx=10)

        # Cancel button
        cancel_button = ttk.Button(button_frame, text="Cancel", command=self.switch_back_callback, width=20, style="Custom.TButton")
        cancel_button.grid(row=0, column=2, padx=10)

# Create the main window
root = tk.Tk()
root.title("Receiver")
root.geometry("500x400")
main_frame = ReceiverFrame(root, lambda: print("Switching back"))
main_frame.show()
root.mainloop()
